TPS (Think-Pair-Share) activity 1: 
Perform the following tasks while paired with your classmates in a breakout room assigned by your TA (you will be assigned to groups of 3-4 students): 


1. Record your TPS partners’ names. 
* Alejandro Alcala 
* Maria Diaz 
* Francisco Lira


2. Independently search the internet for 3 online tutorials on how to set up and use GDB (or LLDB) in your system. 
* http://cseweb.ucsd.edu/classes/fa09/cse141/tutorial_gcc_gdb.html
* https://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/allexperimental/mac-gdb-install.html#:~:text=As%20with%20GCC%2C%20the%20easiest,as%20necessary%20for%20a%20debugger.
* https://www.thomasvitale.com/how-to-setup-gdb-and-eclipse-to-debug-c-files-on-macos-sierra/






3. Share your tutorials with your TPS partners.
4. Bookmark your results in the browser of your computer.




TPS activity 2: Discuss questions 1 – 8 with your TPS partners in your assigned breakout room (15 minutes) and record your answers in a text file named tpsAnswers.txt under a section labelled “TPS 2” (you will continue to use this file to record your answers to all the TPS questions that follow in the lab handout): 


1. How do you compile your punishment.c so that you can debug it using GDB? Try it with your code and set the name of the executable to punish. 
* You do the path were punishment.c is located (cd Desktop/CSE31/Lab_001/Punishment/ ) and then you use the command “GCC punishment.c -o punish” to create an executable environment for gdb.


2. Once punishment.c is compiled, how do you load it in GDB? Try it with your program.
* you use the command “GCC punishment.c -o punish” to create an executable environment for gdb. 


3. Once punish is loaded, how do you run it in GDB? Try to run your punish. 
* You use the command “gdb punish” and then “(gdb) run.”


4. What are breakpoints? How do you set a breakpoint at a certain line of your program? Try to set a breakpoint in punishment.c where the for loop begins. 
* a breakpoint is an intentional stopping or pausing place in a program, put in place for debugging purposes. It is also sometimes simply referred to as a pause. To set breakpoints, type "break [filename]:[linenumber]". For example, if you wanted to set a breakpoint at line 55 of main.cpp, you would type "break main.cpp: 55".
* Break punishment.c: 27


5. Now run the program again. It should stop at the breakpoint you set in Q4. From here, how do you run the program line by line? Try to run the next 3 lines with your program. 
* You type the command “next or n” 


6. While you are still running punish line by line, how can you see the value of a variable? Pick 3 variables in your program and display them in the terminal one by one. 
* You use the command “print or p.”


7. Now that you are tired of running line by line, how do you let the program finish its run? Try to finish running you’re punish. 
* You use the command “continue.” 


8. How do you exit from GDB?
* You use the command “q or quit.” 


TPS activity 3: Discuss questions 1 – 8 with your TPS partners in your assigned breakout room (15 minutes) and record your answers in tpsAnswers.txt under a section labeled “TPS 3”: 


1. How many variables were declared in the first line of main()? How many of them are pointers (and what are they)? 
* There are 4 variables and there are 2 pointers.


2. What will be the values of x, y, and arr[0] if you run the program? Validate your answer by running the program. Why do you think it happens that way? You will need to insert printf statements to display those values. 
* The values of the variables 3. How do you prevent x, y, and the content of arr from having unexpected values? Try to fix them in the program. 


4. The moment you have declared a variable, the program will allocate a memory location for it. Each memory location has an address. Now insert printf statements to display the addresses of x and y. 
 printf("The address of x is: %p \n", &x);
 printf("The address of y is: %p \n", &y);


5. Now insert code so that px points to x and py points to y. Print out the values and addresses of those pointers using only the pointer variables (yes, pointers have addresses too!). You should see that the value of px is equal to the address of x, and the same is true for py and y. 
ANSWER IN CODE


6. As we have learned in lectures, an array name can be used as a pointer to access the content of the array. Write a loop to output the contents of arr by using arr as a pointer (do not use [] in your loop). 


for (int i = 0; i < 10; i++){
        printf("Content of %d element is: %d arr+i is %p \n", i, *(arr+i), arr+i);
    }


7. Are array names really the same as pointers? Let us find out! An array name points to the first element of an array, so arr should point to the address of arr[0]. Insert code to verify this. 
The answer is in code. 


8. Now print out the address of arr. Does the result make sense? Why?


Content of 8 element is: 8 arr+i is 0x7ffeefbff540 
Content of 9 element is: 9 arr+i is 0x7ffeefbff544 
arr 0x7ffeefbff520, address of arr[0] 0x7ffeefbff520 
Address of arr is 0x7ffeefbff520


It makes sense because ethe address is not that far in terms of memory allocation. You can see 
That is the same as arr[0] because basically that’s the same thing.